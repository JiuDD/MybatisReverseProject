<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--加载配置文件-->
    <properties resource="generator.properties"/>
    <!--上下文，context值是自定义的，可换成其它-->
    <context id="context" targetRuntime="MyBatis3" defaultModelType="flat">
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 为模型生成序列化方法-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />

        <!--自动给实体类增加字段注释，并生成swagger注释文档。
        如果不需要生成swagger文档，把type="config.CommentGenerator"去掉即可   CommentGenerator是自己定义的添加注释的类，双击shift查找该类-->
        <commentGenerator type="config.CommentGenerator">
            <!--<commentGenerator >-->
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>

        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}" password="${jdbc.password}">
            <!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题-->
            <property name="nullCatalogMeansCurrent" value="true" />
        </jdbcConnection>

        <!-- 把JDBC DECIMAL和 NUMERIC类型解析为Integer，默认false，为true时把JDBC DECIMAL和NUMERIC类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!--实体类定义-->
        <javaModelGenerator targetPackage="${model_target_package}" targetProject=".\src\main\java">
            <!--是否对model添加构造函数-->
            <property name="constructorBased" value="false"/>
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
            <!--建立的model对象是否不可变，也就是生成的model没有setter方法-->
            <property name="immutable" value="false"/>
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>



        <!--1、传统的xml类型的mapper接口         1、2选其一即可 -->
        <!--xml格式的mapper文件位置定义-->
        <sqlMapGenerator targetPackage="sqlmap" targetProject=".\src\main\resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <!--生成xml的mapper文件-->
        <!--    type="ANNOTATEDMAPPER", 生成Java Model和基于注解的Mapper对象
                type="MIXEDMAPPER", 生成基于注解的Java Model和相应的Mapper对象
                type="XMLMAPPER", 生成SQLMap XML文件和独立的Mapper接口            -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${mapper_target_package}" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--2、接口注解类型的Java mapper接口      1、2选其一即可 -->
        <!--<javaClientGenerator type="ANNOTATEDMAPPER" targetPackage="com.macro.mall.mapper"  targetProject=".\src\main\java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>-->


        <!-- 指定数据库表，要生成哪些表，就写哪些表，要和数据库中对应，不能写错！ -->
        <!--生成全部表tableName设为%-->
        <!--<table tableName="%">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>-->

        <!--生成某一张表，需指定表名称-->
        <!--t_help_center表的text、blob字段设置为varchar-->
        <!--<table tableName="t_business_unit" domainObjectName="BusinessUnit"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <columnOverride column="dsl" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </table>-->


        <!--普通的不需要把blob转换为String的表-->
        <!--ClickHouse表-->  <!--将字段转为驼峰-->
        <table tableName="ce17_zmengzhu_data_detail" domainObjectName="ViewDetail"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="true"
               selectByExampleQueryId="false">
        </table>

        <!--ClickHouse表-->  <!--不将字段转为驼峰，使用数据库的字段的原始命名-->
        <table tableName="${tableName}" domainObjectName="${modelName}"
               enableSelectByExample="true"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               selectByExampleQueryId="false">

            <property name="useActualColumnNames" value="true"/>

        </table>
    </context>
</generatorConfiguration>
