package config;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.StringUtility;

import java.util.Properties;

/**
 * 自定义注释生成器
 * Created by macro on 2018/4/26.
 */
public class CommentGenerator extends DefaultCommentGenerator {
    private boolean addRemarkComments = false;
    private static final String EXAMPLE_SUFFIX="Example";
    private static final String MAPPER_SUFFIX="Mapper";
    //实体类上的注释：io.swagger.annotations.ApiModel
    private static final String API_MODEL_FULL_CLASS_NAME="io.swagger.annotations.ApiModel";
    //实体类上的注释：lombok
    private static final String API_MODEL_LOMBOK_DATA ="lombok.Data";
    private static final String API_MODEL_LOMBOK_ToString="lombok.ToString";
    private static final String API_MODEL_LOMBOK_EXPERIMENTAL_ACCESSORS="lombok.experimental.Accessors";

    //字段上的注释：io.swagger.annotations.ApiModelProperty
    private static final String API_MODEL_PROPERTY_FULL_CLASS_NAME="io.swagger.annotations.ApiModelProperty";

    /**
     * 设置用户配置的参数
     */
    @Override
    public void addConfigurationProperties(Properties properties) {
        super.addConfigurationProperties(properties);
        this.addRemarkComments = StringUtility.isTrue(properties.getProperty("addRemarkComments"));
    }

    /**
     * 给实体类生成JDK标准的doc注释
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        String remarks = introspectedTable.getRemarks();
        if (!StringUtility.stringHasValue(remarks)) {
            remarks = "数据库此表没有注释";
        }
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            topLevelClass.addJavaDocLine("/**");
            topLevelClass.addJavaDocLine(" * Database Table Remarks:");
            String lineSeparator = System.getProperty("line.separator");
            String[] remarkLines = remarks.split(lineSeparator);
            String[] var5 = remarkLines;
            int var6 = remarkLines.length;

            for (int var7 = 0; var7 < var6; ++var7) {
                String remarkLine = var5[var7];
                topLevelClass.addJavaDocLine(" *   " + remarkLine);
            }

            topLevelClass.addJavaDocLine(" *");
            topLevelClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
            StringBuilder sb = new StringBuilder();
            sb.append(" * This class corresponds to the database table ");
            sb.append(introspectedTable.getFullyQualifiedTable());
            topLevelClass.addJavaDocLine(sb.toString());
            topLevelClass.addJavaDocLine(" */");

            //换行
            topLevelClass.addJavaDocLine(lineSeparator);

            topLevelClass.addJavaDocLine("@ApiModel(value=\"" + remarks + "\")" + lineSeparator + "@Accessors(chain = true)" + lineSeparator + "@Data" + lineSeparator + "@ToString");
        }
    }

    /**
     * 给字段添加注释
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        String remarks = introspectedColumn.getRemarks();
        //根据参数和备注信息判断是否添加备注信息
        if(addRemarkComments && StringUtility.stringHasValue(remarks)){
//            addFieldJavaDoc(field, remarks);
            //数据库中特殊字符需要转义
            if(remarks.contains("\"")){
                remarks = remarks.replace("\"","'");
            }
            //给model的字段添加swagger注解
            field.addJavaDocLine("@ApiModelProperty(value = \""+remarks+"\")");
        }
    }

    /**
     * 给model的字段添加注释
     */
    private void addFieldJavaDoc(Field field, String remarks) {
        //文档注释开始
        field.addJavaDocLine("/**");
        //获取数据库字段的备注信息
        String[] remarkLines = remarks.split(System.getProperty("line.separator"));
        for(String remarkLine:remarkLines){
            field.addJavaDocLine(" * "+remarkLine);
        }
        addJavadocTag(field, false);
        field.addJavaDocLine(" */");
    }

    /**
     * Description: 实体类里的 一系列 import
     * @author: JiuDD
     * @param compilationUnit
     * date: 2021/11/25 17:42
     */
    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        super.addJavaFileComment(compilationUnit);
        //只在model中添加swagger注解类的导入
        String fullyQualifiedName = compilationUnit.getType().getFullyQualifiedName();
        boolean contains1 = fullyQualifiedName.contains(MAPPER_SUFFIX);
        boolean contains2 = fullyQualifiedName.contains(EXAMPLE_SUFFIX);
        //实体类上的注解需要的依赖包(排除掉 Example文件 和 Mapper文件，剩下的就是 实体类)
        if(!contains1 && !contains2){
            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_FULL_CLASS_NAME));

            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_LOMBOK_DATA));
            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_LOMBOK_ToString));
            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_LOMBOK_EXPERIMENTAL_ACCESSORS));
        }

        //字段上的注释需要的依赖包：io.swagger.annotations.ApiModelProperty
        if(!contains1 && !contains2){
            compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_PROPERTY_FULL_CLASS_NAME));
        }
    }
}
